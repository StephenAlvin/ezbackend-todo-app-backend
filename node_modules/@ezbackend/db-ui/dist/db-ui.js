"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EzDbUI = exports.buildRoutePrefix = void 0;
var common_1 = require("@ezbackend/common");
var core_1 = require("@ezbackend/core");
var chalk_1 = __importDefault(require("chalk"));
var utils_1 = require("@ezbackend/utils");
var fastify_static_1 = __importDefault(require("fastify-static"));
var path_1 = __importDefault(require("path"));
//Kudos to fastify team for this function, that will be hippity hoppity copied
/**
 * Use this for building route prefixes.
 * Pass in the instance and plugin prefix to generate a proper route prefix.
 * @param instancePrefix
 * @param pluginPrefix
 * @returns
 */
function buildRoutePrefix(instancePrefix, pluginPrefix) {
    if (!pluginPrefix) {
        return instancePrefix;
    }
    // Ensure that there is a '/' between the prefixes
    if (instancePrefix.endsWith('/') && pluginPrefix[0] === '/') {
        // Remove the extra '/' to avoid: '/first//second'
        pluginPrefix = pluginPrefix.slice(1);
    }
    else if (pluginPrefix[0] !== '/') {
        pluginPrefix = '/' + pluginPrefix;
    }
    return instancePrefix + pluginPrefix;
}
exports.buildRoutePrefix = buildRoutePrefix;
function getDbUIGenerators() {
    var generators = (0, common_1.getDefaultGenerators)();
    Object.entries(generators).forEach(function (_a) {
        var key = _a[0], oldGenerator = _a[1];
        generators[key] = function (repo, opts) {
            var routeDetails = oldGenerator(repo, opts);
            return __assign(__assign({}, routeDetails), { schema: __assign(__assign({}, routeDetails.schema), { summary: "Used internally by database UI", tags: ['db-ui'], hide: true }) });
        };
    });
    return generators;
}
function addDBSchemas(instance, opts) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            instance.entities.forEach(function (entity) {
                var repo = instance.orm.getRepository(entity);
                var _a = (0, common_1.convert)(repo.metadata, 'db-ui'), createSchema = _a.createSchema, updateSchema = _a.updateSchema, fullSchema = _a.fullSchema;
                instance.server.addSchema(createSchema);
                instance.server.addSchema(updateSchema);
                instance.server.addSchema(fullSchema);
            });
            return [2 /*return*/];
        });
    });
}
//TODO: Make generator more robust? Like add prefix options for example
function addDbUIEndpoints(instance, opts) {
    return __awaiter(this, void 0, void 0, function () {
        var generators;
        return __generator(this, function (_a) {
            generators = getDbUIGenerators();
            instance.entities.forEach(function (entity) {
                var repo = instance.orm.getRepository(entity);
                Object.values(generators).forEach(function (generator) {
                    var routes = [].concat(generator(repo, { schemaPrefix: "db-ui" }));
                    routes.forEach(function (route) {
                        //Update the route prefix manually here
                        route.url = buildRoutePrefix("/db-ui/".concat(repo.metadata.name), route.url);
                        //TODO: Figure out why types don't match
                        instance.server.route(route);
                    });
                });
            });
            return [2 /*return*/];
        });
    });
}
var DBEndpointRouter = /** @class */ (function (_super) {
    __extends(DBEndpointRouter, _super);
    function DBEndpointRouter() {
        var _this = _super.call(this) || this;
        _this.setHandler("Add DB-UI endpoints", addDbUIEndpoints);
        return _this;
    }
    return DBEndpointRouter;
}(common_1.EzApp));
var BUILD_DIR = path_1.default.join(__dirname, "../ezbackend-database-ui/build");
function dbUIFastifyPlugin(server, opts, cb) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            server.register(fastify_static_1.default, {
                root: BUILD_DIR,
                wildcard: false
            });
            server.setNotFoundHandler(function (req, res) {
                //TODO: Make this not have to go back to db-ui on refresh
                res.redirect("/db-ui");
            });
            cb();
            return [2 /*return*/];
        });
    });
}
var EzDbUI = /** @class */ (function (_super) {
    __extends(EzDbUI, _super);
    function EzDbUI() {
        var _this = _super.call(this) || this;
        _this.setHandler("Add DB-UI endpoint schemas", addDBSchemas);
        _this.addApp("DB-UI Endpoint Router", new DBEndpointRouter());
        _this.setHandler("Serve UI Interface", function (instance) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (process.env.NODE_ENV !== 'production') {
                    instance.server.register(dbUIFastifyPlugin, { prefix: "db-ui" });
                }
                else {
                    (0, utils_1.ezWarning)("You should not run EzDBUI in production, since it allows arbitrary database editing");
                }
                return [2 /*return*/];
            });
        }); });
        _this.setPostRun("Display DB UI URL", function (instance, opts) { return __awaiter(_this, void 0, void 0, function () {
            var port;
            var _a, _b, _c, _d;
            return __generator(this, function (_e) {
                port = (_d = (_a = opts.port) !== null && _a !== void 0 ? _a : (_c = (_b = opts.ezbackend) === null || _b === void 0 ? void 0 : _b.listen) === null || _c === void 0 ? void 0 : _c.port) !== null && _d !== void 0 ? _d : (process.env.PORT || 8000);
                if (port && process.env.NODE_ENV != 'test') {
                    console.log(chalk_1.default.greenBright("Use the database UI at ") + chalk_1.default.yellow.underline("http://localhost:".concat(port, "/db-ui/")));
                }
                return [2 /*return*/];
            });
        }); });
        //TODO: Global plugin scope
        _this.scope = core_1.PluginScope.PARENT;
        return _this;
    }
    return EzDbUI;
}(common_1.EzApp));
exports.EzDbUI = EzDbUI;
//# sourceMappingURL=db-ui.js.map