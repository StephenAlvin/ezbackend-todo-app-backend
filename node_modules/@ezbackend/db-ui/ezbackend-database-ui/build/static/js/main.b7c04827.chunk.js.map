{"version":3,"sources":["Components/DrawerItem.tsx","Helpers/index.ts","Utils/replaceCellObject.tsx","Utils/removeDbui.tsx","Components/SchemaListItem.tsx","Utils/promiseToast.tsx","Components/PostRequestDialog.tsx","Pages/Database.tsx","Utils/modelNameCustomRemover.tsx","Pages/Docs.tsx","Components/Layout.tsx","Utils/openInNewTab.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrawerItem","props","ListItem","button","Typography","Box","color","fontFamily","name","getBaseURL","window","location","protocol","host","replaceCellObject","params","value","Object","removeDbui","text","replace","useStyles","makeStyles","createStyles","listItem","backgroundColor","borderRadius","selected","SchemaListItem","classes","match","selectedItem","onClick","handleListItemClick","root","ListItemText","variant","noWrap","component","fontWeight","fontSize","overflow","textOverflow","promiseToast","fetchPromise","toast","promise","loading","success","error","err","toString","duration","URL","PostRequestDialog","Dialog","open","onClose","handleCloseDialog","maxWidth","padding","marginBottom","schema","getCreateSchema","onSubmit","allData","requestOptions","method","headers","body","JSON","stringify","formData","fetch","then","response","ok","Error","statusText","finally","handleGetRowData","dotenv","config","Database","modelnames","useState","fullSchemas","setFullSchemas","createSchemas","setCreateSchemas","modelNames","setModelNames","columnNames","setColumnNames","rowData","setRowData","setSelectedItem","openPostRequestDialog","setOpenPostRequestDialog","deleteRowsIndex","setDeleteRowsIndex","cellDataValue","setCellDataValue","clickedItem","handleGetColumnData","routeName","fullschemas","forEach","schemaName","keys","properties","map","property","field","width","length","editable","json","data","createschemas","c","filter","createschema","title","undefined","useEffect","values","components","schemas","item","includes","initialSelectedItem","catch","message","Fade","in","timeout","bgcolor","minHeight","Grid","container","direction","justifyContent","spacing","xs","md","style","autoHide","autoHideTimeout","startsWith","s","Hidden","smDown","src","theme","alignItems","marginLeft","IconButton","ids","id","height","borderStyle","rows","columns","checkboxSelection","disableSelectionOnClick","onSelectionModelChange","newSelections","onCellEditCommit","cellData","patchdata","handlePatchSelectedCell","onRowClick","row","getCellClassName","mdUp","align","position","toastOptions","Docs","drawerItems","to","textDecoration","Layout","basename","AppBar","elevation","Toolbar","smUp","edge","handleOpen","Button","textTransform","url","newWindow","opener","openInNewTab","path","createTheme","typography","App","setOpen","ThemeProvider","CssBaseline","handleClose","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7c04827.chunk.js","sourcesContent":["import { ListItem, Typography, Box } from \"@material-ui/core\";\r\n\r\ninterface IDrawerItem {\r\n    name: string\r\n}\r\n\r\nfunction DrawerItem(props: IDrawerItem) {\r\n    return (\r\n        <ListItem button={true}>\r\n            <Typography>\r\n                <Box color=\"white\" fontFamily=\"monospace\">\r\n                    {props.name}\r\n                </Box>\r\n            </Typography>\r\n        </ListItem>\r\n    )\r\n}\r\n\r\nexport default DrawerItem;\r\n","export function getBaseURL() {\r\n    if (process.env.NODE_ENV === 'development') {\r\n        return process.env.REACT_APP_URL\r\n    }\r\n    if (process.env.NODE_ENV === 'production') {\r\n        return window.location.protocol + '//' + window.location.host\r\n    }\r\n}","import { GridCellParams } from \"@mui/x-data-grid\"\r\n\r\nexport default function replaceCellObject(params: GridCellParams) {\r\n    if (params.value instanceof Object) {\r\n        return \"toBeReplaced\"\r\n    }\r\n    else {\r\n        return \"\"\r\n    }\r\n}","export default function removeDbui(text: string) {\r\n    return text.replace(/^(db-ui\\/)/, \"\")\r\n}","import ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport removeDbui from '../Utils/removeDbui';\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        listItem: {\r\n            '&$selected, &$selected:hover': {\r\n                backgroundColor: \"#3B3228\",\r\n            },\r\n            borderRadius: 6\r\n        },\r\n        selected: {}\r\n    })\r\n);\r\n\r\ninterface ISchemaListItem {\r\n    text: string,\r\n    handleListItemClick(key: string): void,\r\n    selectedItem: string\r\n}\r\n\r\nexport default function SchemaListItem(props: ISchemaListItem) {\r\n\r\n    const classes = useStyles();\r\n\r\n    let match = (removeDbui(props.selectedItem) === removeDbui(props.text))\r\n\r\n    return (\r\n        <ListItem\r\n            button\r\n            selected={match}\r\n            onClick={() => props.handleListItemClick(props.text)}\r\n            classes={{\r\n                root: classes.listItem,\r\n                selected: classes.selected\r\n            }}\r\n        >\r\n            <ListItemText>\r\n                <Typography variant=\"body2\" noWrap>\r\n                    <Box\r\n                        component=\"div\"\r\n                        fontFamily={(match) ? \"monospace\" : \"Inter\"}\r\n                        fontWeight=\"normal\"\r\n                        fontSize={(match) ? 16 : 14}\r\n                        color={(match) ? \"#F5EEEB\" : \"#404040\"}\r\n                        overflow=\"hidden\"\r\n                        textOverflow=\"ellipsis\"\r\n                    >\r\n                        {removeDbui(props.text)}\r\n                    </Box>\r\n                </Typography>\r\n            </ListItemText>\r\n        </ListItem>\r\n    )\r\n}","import toast from 'react-hot-toast';\r\n\r\nexport default function promiseToast(fetchPromise: Promise<any>) {\r\n    toast.promise(fetchPromise, {\r\n        loading: 'Loading',\r\n        success: 'Updated',\r\n        error: (err) => err.toString()\r\n    }, { error: { duration: 5000 } })\r\n}\r\n\r\n","import Box from \"@material-ui/core/Box\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport promiseToast from \"../Utils/promiseToast\";\r\nimport Form from \"@rjsf/material-ui\";\r\nimport { getBaseURL } from \"../Helpers\";\r\n\r\n//URGENT TODO: Make lerna publish script prepare run react build command\r\n\r\nconst URL = getBaseURL()\r\n\r\ninterface IPostRequestDialog {\r\n    open: boolean\r\n    getCreateSchema?: any\r\n    selectedItem: string\r\n    handleGetRowData(): void\r\n    handleCloseDialog(): void\r\n}\r\n\r\nexport default function PostRequestDialog(props: IPostRequestDialog) {\r\n\r\n    const handlePost = (allData: any) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(allData.formData)\r\n        };\r\n        let fetchPromise = fetch(`${URL}/${props.selectedItem}/`, requestOptions)\r\n            .then((response) => { if (!response.ok) { throw Error(response.statusText) } return response })\r\n            .finally(() => {\r\n                props.handleCloseDialog()\r\n                props.handleGetRowData()\r\n            })\r\n\r\n        promiseToast(fetchPromise)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={props.open} onClose={props.handleCloseDialog} maxWidth=\"xs\" >\r\n                <Box padding={4} marginBottom={0}>\r\n                    <Form\r\n                        schema={props.getCreateSchema()}\r\n                        onSubmit={handlePost}\r\n                    />\r\n                </Box>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}","import { DataGrid, GridColDef, GridCellEditCommitParams, GridCellValue } from '@mui/x-data-grid';\r\nimport { Fade, IconButton, Typography, Box, Grid, Hidden } from '@material-ui/core';\r\nimport { Scrollbars } from 'react-custom-scrollbars';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport { useEffect, useState } from 'react';\r\nimport { getBaseURL } from '../Helpers';\r\nimport modelNameCustomRemover from '../Utils/modelNameCustomRemover';\r\nimport replaceCellObject from '../Utils/replaceCellObject'\r\nimport SchemaListItem from '../Components/SchemaListItem';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport PostRequestDialog from '../Components/PostRequestDialog';\r\nimport ISchema from '../Interfaces/ISchema';\r\nimport IJsonSchema from '../Interfaces/IJsonSchema';\r\nimport promiseToast from '../Utils/promiseToast';\r\nimport ReactJson from 'react-json-view'\r\nimport dotenv from \"dotenv\";\r\nimport '../App.css';\r\n\r\ndotenv.config()\r\n\r\nconst URL = getBaseURL()\r\n\r\nfunction Database() {\r\n\r\n    const [fullSchemas, setFullSchemas] = useState<ISchema[]>([]);\r\n\r\n    const [createSchemas, setCreateSchemas] = useState<IJsonSchema[]>([]);\r\n\r\n    const [modelNames, setModelNames] = useState<string[]>([]);\r\n\r\n    const [columnNames, setColumnNames] = useState<GridColDef[]>([]);\r\n\r\n    const [rowData, setRowData] = useState<Object[]>([]);\r\n\r\n    const [selectedItem, setSelectedItem] = useState<string>(\"\");\r\n\r\n    const [openPostRequestDialog, setOpenPostRequestDialog] = useState(false);\r\n\r\n    const [deleteRowsIndex, setDeleteRowsIndex] = useState<number[]>([]);\r\n\r\n    const [cellDataValue, setCellDataValue] = useState<GridCellValue>({})\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetch(`${URL}/docs/json`)\r\n\r\n            .then(function (response) { if (!response.ok) { throw Error(response.statusText) } return response.json() })\r\n\r\n            .then((data) => {\r\n\r\n                data = Object.values(data.components.schemas)\r\n\r\n                let newData: ISchema[] = data.map((item: IJsonSchema) => { return { schemaName: item.title, properties: item.properties } })\r\n\r\n                let fullschemas: ISchema[] = newData.filter(schema => schema.schemaName.includes('fullSchema-')).map(schema => { return { schemaName: schema.schemaName.replace('fullSchema-', ''), properties: schema.properties } })\r\n\r\n                let modelnames: string[] = fullschemas.map(schema => { return schema.schemaName })\r\n\r\n                let createschemas = data.filter((schema: any) => schema.title.includes('createSchema-'))\r\n\r\n                createschemas.forEach((schema: IJsonSchema) => { schema.title = schema.title.replace('createSchema-', '') })\r\n\r\n                setFullSchemas(fullschemas)\r\n                setCreateSchemas(createschemas)\r\n                setModelNames(modelnames)\r\n\r\n                let initialSelectedItem = modelnames[0]\r\n\r\n                setSelectedItem(initialSelectedItem)\r\n                handleGetRowData(initialSelectedItem)\r\n                handleGetColumnData(initialSelectedItem, fullschemas)\r\n\r\n            })\r\n\r\n            .catch((error) => toast(\"ERROR\", error.message));\r\n\r\n    }, [])\r\n\r\n    function handleListItemClick(clickedItem: string) {\r\n\r\n        setSelectedItem(clickedItem)\r\n        promiseToast(handleGetRowData(clickedItem))\r\n        handleGetColumnData(clickedItem, fullSchemas)\r\n        setCellDataValue({})\r\n\r\n    }\r\n\r\n    function handleGetColumnData(routeName: string, fullschemas: ISchema[]) {\r\n        fullschemas?.forEach(schema => {\r\n            if (routeName === schema.schemaName) {\r\n                setColumnNames(Object.keys(schema.properties).map(property => {\r\n                    let [charLenThreshHold, maxCellWidth, widthMultiplier] = [5, 150, 45]\r\n                    return {\r\n                        field: property,\r\n                        width: (property.length > charLenThreshHold) ? maxCellWidth : widthMultiplier * property.length,\r\n                        editable: (property === 'id') ? false : true\r\n                    }\r\n                }))\r\n            }\r\n        })\r\n    }\r\n\r\n    function handleGetRowData(routeName: string) {\r\n\r\n        let fetchPromise = fetch(`${URL}/${routeName}/`)\r\n            .then(function (response) { if (!response.ok) { throw Error(response.statusText) } return response.json() })\r\n            .then((data) => { setRowData(data) })\r\n\r\n        return fetchPromise\r\n    }\r\n\r\n    function handleOpenPostRequestDialog() {\r\n        if (getCreateSchema()) {\r\n            //Only if the schema exists\r\n            setOpenPostRequestDialog(true)\r\n        }\r\n    }\r\n\r\n    function handleClosePostRequestDialog() {\r\n        setOpenPostRequestDialog(false)\r\n    }\r\n\r\n    function handleDeleteSelectedRows() {\r\n        let ids = [...deleteRowsIndex]\r\n        if (ids.length === 0) {\r\n            toast('Please select some rows')\r\n        }\r\n        ids.forEach(id => {\r\n\r\n            let fetchPromise = fetch(`${URL}/${selectedItem}/${id}`, { method: 'DELETE' })\r\n                .then(function (response) { if (!response.ok) { throw Error(response.statusText) } return response })\r\n                .finally(() => handleGetRowData(selectedItem))\r\n\r\n            promiseToast(fetchPromise)\r\n        })\r\n    }\r\n\r\n    function handlePatchSelectedCell(patchdata: GridCellEditCommitParams) { //@ts-ignore\r\n        let id: number = patchdata.id\r\n        let body: any = {};\r\n        body[patchdata.field] = patchdata.value\r\n        const requestOptions = {\r\n            method: 'PATCH',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(body)\r\n        };\r\n\r\n        let fetchPromise = fetch(`${URL}/${selectedItem}/${id}`, requestOptions)\r\n            .then(function (response) { if (!response.ok) { throw Error(response.statusText) } return response })\r\n            .finally(() => { handleGetRowData(selectedItem) })\r\n\r\n        promiseToast(fetchPromise)\r\n\r\n    }\r\n\r\n    function getCreateSchema() {\r\n        let createschemas: IJsonSchema[] = [...createSchemas]\r\n        let c = createschemas?.filter(createschema => { return createschema.title === selectedItem })[0]\r\n        if (createSchemas.length === 0) {\r\n            //TODO: @Stephen Any Idea why its rendering twice?\r\n            // toast.error(\"No schemas have been created yet, add an EzModel to your database\")\r\n            return null\r\n        }\r\n        if (c === undefined) {\r\n            // toast.error(\"The selected schema is invalid\")\r\n            return null\r\n        }\r\n        return c\r\n    }\r\n\r\n    return (\r\n        <Fade in={true} timeout={600}>\r\n            <Box bgcolor=\"#EEEEEE\" minHeight=\"100vh\" padding={4}>\r\n                <Grid\r\n                    container\r\n                    direction=\"row\"\r\n                    justifyContent=\"center\"\r\n                    spacing={5}\r\n                >\r\n                    <Grid item xs={12} md={3}>\r\n                        <Grid container direction=\"column\" spacing={5}>\r\n                            <Grid item>\r\n                                <Box style={{ borderRadius: 10, backgroundColor: \"white\", padding: 24, overflow: \"hidden\" }}>\r\n                                    <Scrollbars autoHide autoHideTimeout={100} style={{ width: \"100%\", minHeight: \"200px\" }}>\r\n                                        {modelNameCustomRemover(modelNames).map((s) => <SchemaListItem text={s} key={s} selectedItem={selectedItem} handleListItemClick={handleListItemClick} />)}\r\n                                    </Scrollbars>\r\n                                </Box>\r\n                            </Grid>\r\n                            <Hidden smDown>\r\n                                <Grid item>\r\n                                    <Scrollbars style={{ width: \"100%\", minHeight: \"300px\", borderRadius: 10 }}>\r\n                                        <ReactJson //@ts-ignore\r\n                                            src={cellDataValue}\r\n                                            style={{ padding: 18, borderRadius: 10 }}\r\n                                            theme=\"mocha\"\r\n                                        />\r\n                                    </Scrollbars>\r\n                                </Grid>\r\n                            </Hidden>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} md={9}>\r\n                        <Grid container direction=\"column\" spacing={2}>\r\n                            <Grid item>\r\n                                <Grid container direction=\"row\" alignItems=\"flex-end\">\r\n                                    <Grid item>\r\n                                        <Box marginLeft={1}>\r\n                                            <Typography color=\"textSecondary\" variant=\"subtitle2\">\r\n                                                Click row to view json | Double-click cell to edit | Select row to delete\r\n                                            </Typography>\r\n                                        </Box>\r\n                                    </Grid>\r\n                                    <Grid item xs>\r\n                                        <Grid container justifyContent=\"flex-end\">\r\n                                            <Grid item>\r\n                                                <IconButton color=\"primary\" onClick={handleOpenPostRequestDialog}>\r\n                                                    <AddIcon />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <IconButton>\r\n                                                    <RefreshIcon onClick={() => {\r\n                                                        let fetchPromise = handleGetRowData(selectedItem)\r\n                                                        promiseToast(fetchPromise)\r\n                                                    }} />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <IconButton onClick={handleDeleteSelectedRows}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <DataGrid\r\n                                    style={{\r\n                                        height: \"79vh\",\r\n                                        backgroundColor: \"#fff\",\r\n                                        borderRadius: 10,\r\n                                        borderStyle: \"hidden\",\r\n                                        padding: 12,\r\n                                        fontFamily: \"Inter\"\r\n                                    }}\r\n                                    rows={rowData}\r\n                                    columns={columnNames}\r\n                                    checkboxSelection\r\n                                    disableSelectionOnClick //@ts-ignore\r\n                                    onSelectionModelChange={(newSelections) => { setDeleteRowsIndex(newSelections) }}\r\n                                    onCellEditCommit={(cellData) => { handlePatchSelectedCell(cellData) }}\r\n                                    onRowClick={(cellData) => { setCellDataValue(cellData.row) }}\r\n                                    getCellClassName={replaceCellObject}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Hidden mdUp>\r\n                        <Grid item xs={12}>\r\n                            <Scrollbars style={{ width: \"100%\", height: \"300px\", borderRadius: 10 }}>\r\n                                <ReactJson //@ts-ignore\r\n                                    src={cellDataValue}\r\n                                    style={{ padding: 18, borderRadius: 10 }}\r\n                                    theme=\"mocha\"\r\n                                />\r\n                            </Scrollbars>\r\n                        </Grid>\r\n                    </Hidden>\r\n\r\n                    <Typography variant=\"body1\" align=\"center\">\r\n                        <Box fontFamily=\"monospace\">\r\n                            Powered by EzBackend\r\n                        </Box>\r\n                    </Typography>\r\n                </Grid>\r\n                <PostRequestDialog\r\n                    open={openPostRequestDialog}\r\n                    getCreateSchema={getCreateSchema}\r\n                    handleGetRowData={() => handleGetRowData(selectedItem)}\r\n                    selectedItem={selectedItem}\r\n                    handleCloseDialog={handleClosePostRequestDialog}\r\n                />\r\n                <Toaster\r\n                    position=\"bottom-left\"\r\n                    toastOptions={{ duration: 800 }}\r\n                />\r\n            </Box >\r\n        </Fade>\r\n    );\r\n}\r\n\r\nexport default Database;\r\n","export default function modelNameCustomRemover(modelnames: string[]) {\r\n    return modelnames.filter((name) => name.startsWith('db-ui/'))\r\n  }","import 'rapidoc'; // <-- import rapidoc\r\nimport Fade from '@material-ui/core/Fade';\r\nimport { getBaseURL } from '../Helpers';\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config()\r\n\r\nconst URL = getBaseURL()\r\n\r\nexport default function Docs() {\r\n    return (\r\n        <Fade in={true} timeout={600}>\r\n            {/* @ts-ignore */}\r\n            <rapi-doc rapi-doc\r\n                spec-url={`${URL}/docs/json`}\r\n                render-style=\"read\"\r\n                style={{ height: \"92vh\", width: \"100%\" }}\r\n                nav-bg-color=\"#3B3228\"\r\n                show-header=\"false\"\r\n            />\r\n        </Fade>\r\n    )\r\n}","import { Grid, Hidden, AppBar, IconButton, Toolbar, Typography, Box, Button } from \"@material-ui/core\";\r\nimport DrawerItem from \"./DrawerItem\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Database from \"../Pages/Database\";\r\nimport Docs from \"../Pages/Docs\";\r\nimport openInNewTab from \"../Utils/openInNewTab\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\n\r\nconst drawerItems =\r\n    <>\r\n        <Link to='/' style={{ textDecoration: 'none' }}>\r\n            <DrawerItem name=\"Database\" />\r\n        </Link>\r\n        <Link to='/api-documentation' style={{ textDecoration: 'none' }}>\r\n            <DrawerItem name=\"API Docs\" />\r\n        </Link>\r\n    </>\r\n\r\ninterface ILayout {\r\n    open: boolean\r\n    handleOpen(): void\r\n    handleClose(): void\r\n}\r\n\r\nfunction Layout(props: ILayout) {\r\n\r\n    return (\r\n        <Box bgcolor=\"eee\" minHeight=\"100vh\">\r\n            <Router basename=\"/db-ui\">\r\n                <Grid container direction=\"column\" style={{ backgroundColor: \"#eee\", minHeight: \"100vh\" }}>\r\n                    <Grid item>\r\n                        <AppBar position=\"relative\" elevation={0} style={{ backgroundColor: '#3B3228' }}>\r\n                            <Toolbar>\r\n\r\n                                {/* For Mobile Only*/}\r\n                                <Hidden smUp>\r\n                                    <IconButton edge=\"start\" color=\"inherit\" onClick={props.handleOpen}>\r\n                                        <MenuIcon />\r\n                                    </IconButton>\r\n                                </Hidden>\r\n\r\n                                <Button style={{ textTransform: 'none' }} onClick={() => { openInNewTab('https://www.ezbackend.io/') }}>\r\n                                    <Typography variant=\"h5\" align=\"center\">\r\n                                        <Box fontFamily=\"monospace\" padding={2} color=\"#F5EEEB\">\r\n                                            EzBackend\r\n                                        </Box>\r\n                                    </Typography>\r\n                                </Button>\r\n\r\n                                {drawerItems}\r\n\r\n                            </Toolbar>\r\n                        </AppBar>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Switch>\r\n                            <Route path=\"/api-documentation\">\r\n                                <Docs />\r\n                            </Route>\r\n                            <Route path=\"/\">\r\n                                <Database />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Grid>\r\n                </Grid >\r\n            </Router>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Layout;\r\n","export default function openInNewTab(url: string) {\r\n    const newWindow = window.open(url, '_blank', 'noopener,noreferrer')\r\n    if (newWindow) newWindow.opener = null\r\n}","import Layout from \"./Components/Layout\";\r\nimport { useState } from \"react\";\r\nimport { createTheme, CssBaseline, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n    fontFamily: 'Inter, Roboto Mono, monospace',\r\n  }\r\n});\r\n\r\nfunction App() {\r\n\r\n  const [open, setOpen] = useState<boolean>(false);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <CssBaseline/>\r\n      <Layout\r\n        open={open}\r\n        handleClose={() => { setOpen(false) }}\r\n        handleOpen={() => { setOpen(true) }}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}