import { kApp } from './symbols';
import avvio, { Avvio, Plugin } from 'avvio';
export declare type PluginType = Plugin<AppInstanceOpts, AppInstance>;
export declare type Lifecycle = '_preInit' | '_init' | '_postInit' | '_preHandler' | '_handler' | '_postHandler' | '_preRun' | '_run' | '_postRun';
export declare enum PluginScope {
    PARENT = 0,
    DEFAULT = 1
}
export declare const LIFECYCLE: Array<Lifecycle>;
export declare class AppInstance {
    [kApp]: App;
}
export declare class AppInstanceOpts {
}
export declare type Override = Avvio<AppInstance>['override'];
export declare type Overrides = {
    [name: string]: Avvio<unknown>['override'];
};
/**
 * An App is the basic building block for a plugin system, it contains all core and lifecycle methods.
 *
 * **App Lifecycle**
 *
 * {@link setPreInit} → {@link setInit} → {@link setPostInit}
 *
 * → {@link setPreHandler} → {@link setHandler} → {@link setPostHandler}
 *
 * → {@link setPreRun} → {@link setRun} → {@link setPostRun}
 *
 */
export declare class App {
    protected _parent: App | undefined;
    protected _apps: Map<string, App>;
    protected _preInit: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _init: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _postInit: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _preHandler: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _handler: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _postHandler: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _preRun: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _run: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _postRun: Map<string, Plugin<AppInstanceOpts, AppInstance>>;
    protected _instance: Avvio<AppInstance>;
    protected _name: string;
    protected _scope: PluginScope;
    protected _overrides: Overrides;
    protected _unnamedCounter: number;
    opts: any;
    constructor();
    get apps(): Map<string, App>;
    get init(): Map<string, avvio.Plugin<AppInstanceOpts, AppInstance>>;
    get handler(): Map<string, avvio.Plugin<AppInstanceOpts, AppInstance>>;
    get run(): Map<string, avvio.Plugin<AppInstanceOpts, AppInstance>>;
    get instance(): avvio.Avvio<AppInstance>;
    get name(): string;
    get scope(): PluginScope;
    get parent(): App | undefined;
    get overrides(): Overrides;
    set name(newName: string);
    set scope(newScope: PluginScope);
    /**
     * Set's it's argument function as a hook during the {@link setPreInit} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPreInit(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setInit} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setInit(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setPostInit} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPostInit(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setPreHandler} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPreHandler(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setHandler} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setHandler(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setPostHandler} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPostHandler(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setPreRun} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPreRun(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setRun} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setRun(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Set's it's argument function as a hook during the {@link setPostRun} point of the lifecycle
     * @param funcName Name of function to be called
     * @param plugin Plugin where function is located
     */
    setPostRun(funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Removes a previously added function from a lifecycle method
     * @param lifecycle Lifecycle where function was added
     * @param funcName Name of function that was added
     */
    removeHook(lifecycle: Lifecycle, funcName: string): void;
    /**
     * Helper function for each lifecycle method to set it's argument functions as hooks in the lifecycle
     * @param lifecycle Point in the lifecycle to place the function
     * @param funcName Name of function to be placed
     * @param plugin Plugin where function is located in
     */
    setHook(lifecycle: Lifecycle, funcName: string, plugin: Plugin<any, any>): void;
    /**
     * Assigns current app to a parent app.
     * Note! You can only have a maximum of 1 parent.
     * EzBackend follows Fastify's encapsulation system. Click [here](https://www.fastify.io/docs/latest/Encapsulation/) for more information on Fastify's encapsulation
     * @param app
     */
    _setParent(app: App): void;
    /**
     * Creates a new app
     * Note! You cannot have an app with the same name
     * @param name
     * @param newApp
     * @param opts options
     */
    addApp(childApp: App, opts?: Object): undefined;
    addApp(name: string, childApp: App, opts?: Object): undefined;
    getApp(name: string): App | undefined;
    /**
     * Retrieves the function assigned to the lifecycle method for the current app
     * @param lifecycle
     * @returns
     */
    getHookPlugin(lifecycle: Lifecycle): undefined | PluginType;
    /**
     * Starts the app running. You can pass in app options to configure how the app should run
     * @param opts
     */
    start(opts?: any): Promise<void>;
    /**
     *
     * @param varName
     * @param override
     */
    setCustomOverride(varName: string, override: Avvio<unknown>['override']): void;
    /**
     *
     * @param old
     * @param fn
     * @param opts
     * @returns
     */
    protected override: Override;
}
