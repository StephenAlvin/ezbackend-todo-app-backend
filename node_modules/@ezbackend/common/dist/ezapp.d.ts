/// <reference types="node" />
import { App } from "@ezbackend/core";
import { EzBackendInstance, EzBackendOpts } from ".";
import { FastifyInstance, FastifyRegister } from "fastify";
import { Plugin } from 'avvio';
declare function createServer(parent: EzApp): {
    delete: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    get: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    head: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    patch: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    post: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    put: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    options: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    all: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    route: (opts: import("fastify").RouteOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>) => void;
    addHook: (...opts: [name: "onRequest", hook: import("fastify").onRequestHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onRequest", hook: import("fastify").onRequestAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preParsing", hook: import("fastify").preParsingHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preParsing", hook: import("fastify").preParsingAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preValidation", hook: import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preValidation", hook: import("fastify").preValidationAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preHandler", hook: import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preHandler", hook: import("fastify").preHandlerAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preSerialization", hook: import("fastify").preSerializationHookHandler<unknown, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "preSerialization", hook: import("fastify").preSerializationAsyncHookHandler<unknown, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onSend", hook: import("fastify").onSendHookHandler<unknown, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onSend", hook: import("fastify").onSendAsyncHookHandler<unknown, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onResponse", hook: import("fastify").onResponseHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onResponse", hook: import("fastify").onResponseAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onTimeout", hook: import("fastify").onTimeoutHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onTimeout", hook: import("fastify").onTimeoutAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onError", hook: import("fastify").onErrorHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify-error").FastifyError>] | [name: "onError", hook: import("fastify").onErrorAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, import("fastify-error").FastifyError>] | [name: "onRoute", hook: import("fastify").onRouteHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [name: "onRegister", hook: import("fastify").onRegisterHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>] | [name: "onReady", hook: import("fastify").onReadyHookHandler] | [name: "onReady", hook: import("fastify").onReadyAsyncHookHandler] | [name: "onClose", hook: import("fastify").onCloseHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>]) => void;
    addSchema: (schema: unknown) => void;
    setSerializerCompiler: (schemaCompiler: import("fastify/types/schema").FastifySerializerCompiler<unknown>) => void;
    addContentTypeParser: (...opts: [contentType: string | RegExp | string[], opts: {
        bodyLimit?: number | undefined;
    }, parser: import("fastify").FastifyContentTypeParser<import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>] | [contentType: string | RegExp | string[], parser: import("fastify").FastifyContentTypeParser<import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>] | [contentType: string | RegExp | string[], opts: {
        parseAs: "string" | "buffer";
        bodyLimit?: number | undefined;
    }, parser: import("fastify").FastifyBodyParser<string | Buffer, import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>]) => void;
    decorate: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    decorateReply: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    decorateRequest: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    inject: (...opts: [] | [opts: string | import("light-my-request").InjectOptions, cb: import("light-my-request").CallbackFunc] | [opts: string | import("light-my-request").InjectOptions]) => void;
    register: FastifyRegister<void>;
    setNotFoundHandler: (...opts: [handler: (request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void] | [opts: {
        preValidation?: import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown> | import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>[] | undefined;
        preHandler?: import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown> | import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>[] | undefined;
    }, handler: (request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void]) => void;
    setErrorHandler: (handler: (this: FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>, error: Error, request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void | Promise<void>) => void;
};
export declare type EzBackendServer = ReturnType<typeof createServer>;
/**
 * Building block to build a plugin system
 * Child of {@link App}  {@link App} class
 */
export declare class EzApp extends App {
    protected _functions: Array<Function>;
    protected _defaultOpts: EzBackendOpts[keyof EzBackendOpts] | undefined;
    get functions(): Function[];
    setDefaultOpts<LocalOpts extends EzBackendOpts[keyof EzBackendOpts]>(opts: LocalOpts): void;
    getOpts<LocalOptsKey extends keyof EzBackendOpts>(optsPrefix: LocalOptsKey, fullOpts: EzBackendOpts): EzBackendOpts[LocalOptsKey];
    /**
     * Creates a fastify instance
     */
    constructor();
    delete: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    get: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    head: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    patch: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    post: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    put: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    options: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    all: (...opts: [path: string, opts: import("fastify").RouteShorthandOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, handler: import("fastify").RouteHandlerMethod<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>] | [path: string, opts: import("fastify").RouteShorthandOptionsWithHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>]) => void;
    route: (opts: import("fastify").RouteOptions<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown, unknown>) => void;
    addHook: {
        <RouteGeneric extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig = unknown>(name: "onRequest", hook: import("fastify").onRequestHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric, ContextConfig>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_1 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_1 = unknown>(name: "onRequest", hook: import("fastify").onRequestAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_1, ContextConfig_1>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_2 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_2 = unknown>(name: "preParsing", hook: import("fastify").preParsingHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_2, ContextConfig_2>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_3 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_3 = unknown>(name: "preParsing", hook: import("fastify").preParsingAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_3, ContextConfig_3>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_4 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_4 = unknown>(name: "preValidation", hook: import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_4, ContextConfig_4>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_5 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_5 = unknown>(name: "preValidation", hook: import("fastify").preValidationAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_5, ContextConfig_5>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_6 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_6 = unknown>(name: "preHandler", hook: import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_6, ContextConfig_6>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_7 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_7 = unknown>(name: "preHandler", hook: import("fastify").preHandlerAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_7, ContextConfig_7>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <PreSerializationPayload = unknown, RouteGeneric_8 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_8 = unknown>(name: "preSerialization", hook: import("fastify").preSerializationHookHandler<PreSerializationPayload, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_8, ContextConfig_8>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <PreSerializationPayload_1 = unknown, RouteGeneric_9 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_9 = unknown>(name: "preSerialization", hook: import("fastify").preSerializationAsyncHookHandler<PreSerializationPayload_1, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_9, ContextConfig_9>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <OnSendPayload = unknown, RouteGeneric_10 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_10 = unknown>(name: "onSend", hook: import("fastify").onSendHookHandler<OnSendPayload, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_10, ContextConfig_10>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <OnSendPayload_1 = unknown, RouteGeneric_11 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_11 = unknown>(name: "onSend", hook: import("fastify").onSendAsyncHookHandler<OnSendPayload_1, import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_11, ContextConfig_11>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_12 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_12 = unknown>(name: "onResponse", hook: import("fastify").onResponseHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_12, ContextConfig_12>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_13 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_13 = unknown>(name: "onResponse", hook: import("fastify").onResponseAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_13, ContextConfig_13>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_14 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_14 = unknown>(name: "onTimeout", hook: import("fastify").onTimeoutHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_14, ContextConfig_14>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_15 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_15 = unknown>(name: "onTimeout", hook: import("fastify").onTimeoutAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_15, ContextConfig_15>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_16 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_16 = unknown>(name: "onError", hook: import("fastify").onErrorHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_16, ContextConfig_16, import("fastify-error").FastifyError>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_17 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_17 = unknown>(name: "onError", hook: import("fastify").onErrorAsyncHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_17, ContextConfig_17, import("fastify-error").FastifyError>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        <RouteGeneric_18 extends import("fastify/types/route").RouteGenericInterface = import("fastify/types/route").RouteGenericInterface, ContextConfig_18 = unknown>(name: "onRoute", hook: import("fastify").onRouteHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, RouteGeneric_18, ContextConfig_18>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        (name: "onRegister", hook: import("fastify").onRegisterHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        (name: "onReady", hook: import("fastify").onReadyHookHandler): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        (name: "onReady", hook: import("fastify").onReadyAsyncHookHandler): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
        (name: "onClose", hook: import("fastify").onCloseHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>): FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>;
    };
    addSchema: (schema: unknown) => void;
    setSerializerCompiler: (schemaCompiler: import("fastify/types/schema").FastifySerializerCompiler<unknown>) => void;
    addContentTypeParser: (...opts: [contentType: string | RegExp | string[], opts: {
        bodyLimit?: number | undefined;
    }, parser: import("fastify").FastifyContentTypeParser<import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>] | [contentType: string | RegExp | string[], parser: import("fastify").FastifyContentTypeParser<import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>] | [contentType: string | RegExp | string[], opts: {
        parseAs: "string" | "buffer";
        bodyLimit?: number | undefined;
    }, parser: import("fastify").FastifyBodyParser<string | Buffer, import("http").Server, import("http").IncomingMessage, import("fastify/types/route").RouteGenericInterface>]) => void;
    decorate: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    decorateReply: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    decorateRequest: (property: string | symbol, value: unknown, dependencies?: string[] | undefined) => void;
    register: (...opts: [plugin: import("fastify").FastifyPluginCallback<import("fastify").FastifyPluginOptions, import("http").Server>, opts?: import("fastify").FastifyRegisterOptions<import("fastify").FastifyPluginOptions> | undefined] | [plugin: import("fastify").FastifyPluginAsync<import("fastify").FastifyPluginOptions, import("http").Server>, opts?: import("fastify").FastifyRegisterOptions<import("fastify").FastifyPluginOptions> | undefined] | [plugin: import("fastify").FastifyPluginCallback<import("fastify").FastifyPluginOptions, import("http").Server> | import("fastify").FastifyPluginAsync<import("fastify").FastifyPluginOptions, import("http").Server> | Promise<{
        default: import("fastify").FastifyPluginCallback<import("fastify").FastifyPluginOptions, import("http").Server>;
    }> | Promise<{
        default: import("fastify").FastifyPluginAsync<import("fastify").FastifyPluginOptions, import("http").Server>;
    }>, opts?: import("fastify").FastifyRegisterOptions<import("fastify").FastifyPluginOptions> | undefined]) => void;
    setNotFoundHandler: (...opts: [handler: (request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void] | [opts: {
        preValidation?: import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown> | import("fastify").preValidationHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>[] | undefined;
        preHandler?: import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown> | import("fastify").preHandlerHookHandler<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>[] | undefined;
    }, handler: (request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void]) => void;
    setErrorHandler: (handler: (this: FastifyInstance<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify").FastifyLoggerInstance>, error: Error, request: import("fastify").FastifyRequest<import("fastify/types/route").RouteGenericInterface, import("http").Server, import("http").IncomingMessage, unknown>, reply: import("fastify").FastifyReply<import("http").Server, import("http").IncomingMessage, import("http").ServerResponse, import("fastify/types/route").RouteGenericInterface, unknown>) => void | Promise<void>) => void;
    setPreInit: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setInit: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setPostInit: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setPreHandler: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setHandler: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setPostHandler: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setPreRun: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setRun: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    setPostRun: (funcName: string, plugin: Plugin<EzBackendOpts, EzBackendInstance>) => void;
    /**
     * Registers all fastify plugins to server instance of ezbackend application
     * @param server Server instance
     * @param parent EzBackend Object
     */
    registerFastifyPlugins(server: FastifyInstance, parent: EzApp): void;
}
export {};
