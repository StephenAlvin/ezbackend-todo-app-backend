"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.outgoingPacketMiddleware = void 0;
var socket_io_event_context_1 = require("socket-io-event-context");
var context_1 = require("../rules/context");
var checkReadRules = function (instance) {
    var event = (0, context_1.getContext)(context_1.REALTIME.RULE_CONTEXT);
    if (event) {
        instance.orm.subscribers.forEach(function (subscriber) {
            var _a;
            //URGENT TODO: Handle multiple contexts
            //URGENT URGENT TODO: Make sure we don't run nonsubscriber for subscribers that are not rules
            (_a = subscriber.afterLoad) === null || _a === void 0 ? void 0 : _a.call(subscriber, event.entity, event);
        });
    }
};
var outgoingPacketMiddleware = function (instance, opts) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        instance._server.addHook("onReady", function () { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                instance._server.io.use(function (socket, next) {
                    //This is a monkey patch in order to ensure outgoing packets are secure u
                    //@ts-ignore
                    var oldWriteToEngine = socket.client.writeToEngine.bind(socket.client);
                    //@ts-ignore
                    socket.client.writeToEngine = function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        try {
                            socket_io_event_context_1.socketContext.set(context_1.REALTIME.SOCKET_CONTEXT, socket.request);
                            if ((0, context_1.getContext)(context_1.REALTIME.IGNORE_RULES) !== true) {
                                checkReadRules(instance);
                            }
                            oldWriteToEngine.apply(void 0, args);
                        }
                        catch (_a) {
                        }
                    };
                    next();
                });
                return [2 /*return*/];
            });
        }); });
        return [2 /*return*/];
    });
}); };
exports.outgoingPacketMiddleware = outgoingPacketMiddleware;
//# sourceMappingURL=socket-io-outgoing-packet-middleware.js.map