"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRulesSubscriber = exports.EzRules = exports.RuleType = void 0;
var fastify_request_context_1 = require("fastify-request-context");
var socket_io_event_context_1 = require("socket-io-event-context");
var typeorm_1 = require("typeorm");
var __1 = require("..");
var ezapp_1 = require("../../ezapp");
var context_1 = require("../../rules/context");
var RuleType;
(function (RuleType) {
    RuleType["CREATE"] = "create";
    RuleType["READ"] = "read";
    RuleType["UPDATE"] = "update";
    RuleType["DELETE"] = "delete";
})(RuleType = exports.RuleType || (exports.RuleType = {}));
var EzRules = /** @class */ (function (_super) {
    __extends(EzRules, _super);
    function EzRules(modelName) {
        var _this = _super.call(this) || this;
        _this.modelName = modelName;
        _this.context = [];
        _this.ruleFunctionMetas = [];
        _this.setInit("Add Rules Subscriber", function (instance) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                instance.subscribers.unshift(createRulesSubscriber(this));
                return [2 /*return*/];
            });
        }); });
        return _this;
    }
    EzRules.prototype.for = function () {
        var rules = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            rules[_i] = arguments[_i];
        }
        this.context = rules;
        return this;
    };
    EzRules.prototype.check = function (rule) {
        this.ruleFunctionMetas.push({
            types: this.context,
            rule: rule
        });
        return this;
    };
    return EzRules;
}(ezapp_1.EzApp));
exports.EzRules = EzRules;
function createRulesSubscriber(ezRules) {
    function isRelevantRule(event, ruleMeta, ruleType) {
        //TODO: Make it work with listenTo() to reduce overhead
        if (event.metadata.name != ezRules.modelName) {
            return false;
        }
        //TODO: Make RuleSubscriber only subscribe to used events to reduce overhead
        if (!ruleMeta.types.includes(ruleType)) {
            return false;
        }
        return true;
    }
    function getFastifyRequest() {
        return fastify_request_context_1.requestContext.get("request");
    }
    function getSocketRequest() {
        return socket_io_event_context_1.socketContext.get("request");
    }
    var RuleSubscriber = /** @class */ (function () {
        function RuleSubscriber() {
        }
        RuleSubscriber.prototype.afterLoad = function (entity, event) {
            if ((0, context_1.getContext)(context_1.REALTIME.IGNORE_RULES) === true)
                return;
            (0, context_1.setContext)(context_1.REALTIME.RULE_CONTEXT, event);
            ezRules.ruleFunctionMetas.forEach(function (ruleMeta) {
                if (!isRelevantRule(event, ruleMeta, RuleType.READ))
                    return;
                var fastifyReq = getFastifyRequest();
                if (fastifyReq)
                    ruleMeta.rule(fastifyReq, event);
                var socketReq = getSocketRequest();
                if (socketReq)
                    ruleMeta.rule(socketReq, event);
            });
        };
        RuleSubscriber.prototype.beforeUpdate = function (event) {
            if ((0, context_1.getContext)(context_1.REALTIME.IGNORE_RULES) === true)
                return;
            (0, context_1.setContext)(context_1.REALTIME.RULE_CONTEXT, event);
            ezRules.ruleFunctionMetas.forEach(function (ruleMeta) {
                if (!isRelevantRule(event, ruleMeta, RuleType.UPDATE))
                    return;
                var fastifyReq = getFastifyRequest();
                if (fastifyReq)
                    ruleMeta.rule(fastifyReq, event);
                var socketReq = getSocketRequest();
                if (socketReq)
                    ruleMeta.rule(socketReq, event);
            });
        };
        RuleSubscriber.prototype.beforeInsert = function (event) {
            if ((0, context_1.getContext)(context_1.REALTIME.IGNORE_RULES) === true)
                return;
            (0, context_1.setContext)(context_1.REALTIME.RULE_CONTEXT, event);
            ezRules.ruleFunctionMetas.forEach(function (ruleMeta) {
                if (!isRelevantRule(event, ruleMeta, RuleType.CREATE))
                    return;
                var fastifyReq = getFastifyRequest();
                if (fastifyReq)
                    ruleMeta.rule(fastifyReq, event);
                var socketReq = getSocketRequest();
                if (socketReq)
                    ruleMeta.rule(socketReq, event);
            });
        };
        RuleSubscriber.prototype.beforeRemove = function (event) {
            if ((0, context_1.getContext)(context_1.REALTIME.IGNORE_RULES) === true)
                return;
            (0, context_1.setContext)(context_1.REALTIME.RULE_CONTEXT, event);
            ezRules.ruleFunctionMetas.forEach(function (ruleMeta) {
                if (!isRelevantRule(event, ruleMeta, RuleType.DELETE))
                    return;
                var fastifyReq = getFastifyRequest();
                if (fastifyReq)
                    ruleMeta.rule(fastifyReq, event);
                var socketReq = getSocketRequest();
                if (socketReq)
                    ruleMeta.rule(socketReq, event);
            });
        };
        return RuleSubscriber;
    }());
    return (0, __1.DecorateClass)((0, typeorm_1.EventSubscriber)(), RuleSubscriber);
}
exports.createRulesSubscriber = createRulesSubscriber;
//# sourceMappingURL=ez-rules.js.map