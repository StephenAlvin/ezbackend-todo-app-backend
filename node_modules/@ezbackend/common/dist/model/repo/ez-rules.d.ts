import { FastifyRequest } from "fastify";
import { Socket } from "socket.io";
import { InsertEvent, UpdateEvent, RemoveEvent, LoadEvent } from "typeorm";
import { EzApp } from "../../ezapp";
export declare enum RuleType {
    CREATE = "create",
    READ = "read",
    UPDATE = "update",
    DELETE = "delete"
}
export declare type RuleTypes = Array<RuleType>;
export declare type GetEventContext<Type extends RuleType> = Type extends RuleType.CREATE ? InsertEvent<any> : Type extends RuleType.READ ? LoadEvent<any> : Type extends RuleType.UPDATE ? UpdateEvent<any> : Type extends RuleType.DELETE ? RemoveEvent<any> : never;
export declare type AllPossibleEventContexts<T extends RuleTypes = RuleTypes> = GetEventContext<T[number]>;
export declare type AllPossibleRequestTypes = FastifyRequest | Socket['request'] | null;
export declare type RuleFunction<T extends RuleTypes = RuleTypes> = (req: AllPossibleRequestTypes, event: AllPossibleEventContexts<T>) => void;
export declare type RuleFunctionMeta = {
    types: RuleTypes;
    rule: RuleFunction;
};
export declare class EzRules<CurrentRuleTypes extends RuleTypes = RuleTypes> extends EzApp {
    modelName: string;
    context: RuleTypes;
    ruleFunctionMetas: Array<RuleFunctionMeta>;
    constructor(modelName: string);
    for<T extends RuleTypes>(...rules: T): EzRules<T>;
    check(rule: RuleFunction<CurrentRuleTypes>): this;
}
export declare function createRulesSubscriber(ezRules: EzRules): Function;
